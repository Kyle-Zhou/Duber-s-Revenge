  /**
  * zombieWave 
  * checks if zombies are currently alive and if not begin the grace period
  * Once grace period is done spawn in the next wave
  * @param g, Graphics
  */
  public void zombieWave(Graphics g){ 
    zombiesAlive = false; 
    
    if (hud.getWaveNum() == 0) {
      int num = random.nextInt(10)+1; 
      nextWave(num);
    }
    
    for (int i = 0; i < entities.length; i++){ 
      if (entities[i] instanceof Zombie) { 
        zombiesAlive = true; 
      } 
    } 
    
    if (zombiesAlive == false) { 
      if (gracePeriod == false) {
        counter.setGracePeriodTime(System.currentTimeMillis());
        gracePeriod = true;
      }
      long time = 10000;
      if (counter.getGracePeriodTime() != 0){
        if (counter.getGracePeriodTime()+10000 <= System.currentTimeMillis()) {
          gracePeriod = false;
          int num = random.nextInt(hud.getWaveNum()*8+1)+10; 
          nextWave(num); 
        }
      }
    }
  }
  
  /**
  * nextWave 
  * checks if zombies are spawned in duber's screen
  * spawns random zombie types
  */
  public void nextWave(int number) { 
    hud.setWaveNum(hud.getWaveNum()+1); 
    for (int i = 0; i < number; i++) { 
      int xRange = random.nextInt(4372)+64; 
      int yRange = random.nextInt(4302)+100; 
      int randInt = random.nextInt(2)+1; 
      
      if (((xRange < (int)-scroll.getXCamera()) && (yRange > (int)-scroll.getYCamera())) || 
          ((xRange < (int)-scroll.getXCamera()) && (yRange < (int)-scroll.getYCamera())) || 
          ((xRange > (int)-scroll.getXCamera() + maxX) && (yRange > (int)-scroll.getYCamera())) || 
          ((xRange > (int)-scroll.getXCamera() + maxX) && (yRange < (int)-scroll.getYCamera())) || 
          (yRange > (int)-scroll.getYCamera()+maxY)) { 
        int randomZombie = random.nextInt(4); 
        if (randomZombie == 0){
          spawner.spawnWalker(xRange, yRange, 100, 10, 1); 
        } else if (randomZombie == 1){
          spawner.spawnRunner(xRange, yRange, 70, 5, 3); 
        } else if (randomZombie == 2){
          spawner.spawnSpitter(xRange, yRange, 100, 10, 1); 
        } else {
          spawner.spawnBloated(xRange, yRange, 200, 20, 1);
        }
      } else { 
        i--; 
      } 
    } 
  }
  
  /**
  * counterReloading 
  * checks for reloading request
  * checks if current time is equal to the reload speed + time of which reload was set to true
  */
  public void counterReloading() {
    if (weapons[spawner.getCurrentWeapon()].getReloading() == true){
      if (System.currentTimeMillis() >= weapons[spawner.getCurrentWeapon()].getReloadSpeed()+counter.getReloadTime()) {
        weapons[spawner.getCurrentWeapon()].reload();
      }
    }
  }
